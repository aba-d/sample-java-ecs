name: CI-CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - Feature-*
      - main
  pull_request:
    types: [opened, edited, synchronize, reopened]
    branches:
      - main
      - Integration
      - develop

permissions:
  security-events: write
  actions: read
  contents: read
  packages: write
  id-token: write

jobs:
  # ------------------------
  # Commit Checks
  # ------------------------
  commit-check:
    name: Commit Checks
    uses: aba-enterprise/enterprise-ci-templates/.github/workflows/commit-check-template.yml@main
    with:
      base_branch: main
      jira_prefix: "SCRUM|PROJ|scrum|proj"
  
  # ------------------------
  # Code Scan (Codeql)
  # ------------------------
  # Codeql-scan:
  #   name: GHAS scan
  #   needs: commit-check
  #   uses: aba-enterprise/enterprise-ci-templates/.github/workflows/codeql-template.yml@main
  #   with:
  #     language: 'java'   # change from 'csharp' to 'java'
  #     projectPath: 'sample-java-ecs/pom.xml'   # path to your Java project pom.xml
  #     buildCommand: 'mvn clean package -DskipTests'       # command to build your Java project
  #   secrets: inherit
  
  # ------------------------
  # Veracode
  # ------------------------
  # Veracode-scan:
  #   name: Veracode SAST
  #   needs: Codeql-scan
  #   uses: aba-enterprise/enterprise-ci-templates/.github/workflows/veracode-baseline-scan-template.yml@main
  #   with:
  #     run-veracode-gate-check: "no"
  #   secrets: inherit
  
  # ------------------------
  # Sonarqube scan
  # ------------------------
  # Sonarqube-scan:
  #   name: Test Coverage
  #   needs: Codeql-scan
  #   uses: aba-enterprise/enterprise-ci-templates/.github/workflows/sonarqube-scan-template.yml@main
  #   with:
  #     projectKey: 'org-testfordemo_myapp-netcore'
  #     organizationKey: org-testfordemo
  #     run-sonarqube-gate-check: "no"
  #     projectSlnPath: "demogitactions.sln"
  #     testProjectPath: "dotnet-ecs-sample.Tests/dotnet-ecs-sample.Tests.csproj"
  #   secrets:
  #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # # ------------------------
  # # CI Stage (Build Image and Push to ECR)
  # # ------------------------
  ci:
    name: Build, Scan and Push Image to ECR
    # needs: [Sonarqube-scan, Veracode-scan]
    uses: aba-enterprise/enterprise-ci-templates/.github/workflows/docker-build-push.yml@main
    with:
      language: 'java'                           # change from 'csharp' to 'java'
      project-path: 'sample-java-ecs'            # path to your Java project root
      dockerfile-path: './Dockerfile'  # Dockerfile path
      language-version: '17'                     # JDK version (change to match your project)
      environment: 'dev'                         # environment can be dev, qa, etc.
      image-tag: '${{ github.sha }}'             # Docker image tag (commit SHA)
    secrets: inherit

  # ------------------------
  # Deploy to Dev (auto) ECS Task + Service
  # ------------------------
  ecs-deploy-dev:
    needs: ci
    name: Deploy to Dev - Single Image
    uses: aba-enterprise/enterprise-ci-templates/.github/workflows/ecs-deployment-template.yml@main
    with:
      image-tag: ${{ github.repository }}-${{ github.ref_name }}-${{ github.sha }}
      environment: dev
      language: csharp
  
  # # ------------------------
  # # Deploy to QA (requires approval)
  # # ------------------------
  # ecs-deploy-qa:
  #   name: Deploy to QA
  #   needs: ecs-deploy-dev
  #   if: ${{ github.event_name == 'pull_request' || github.event_name == 'push' }}
  #   uses: aba-enterprise/enterprise-ci-templates/.github/workflows/ecs-deployment-template.yml@main
  #   with:
  #     service-name: ${{ vars.SERVICE_NAME }}
  #     task-family: ${{ vars.TASK_FAMILY }}
  #     container-name: ${{ vars.CONTAINER_NAME }}
  #     desired-count: ${{ vars.DESIRED_COUNT }}
  #     image-tag: ${{ github.sha }}
  #     environment: qa
  #     language: csharp
  #     extra-env: '[{\"name\":\"DB_URL\",\"value\":\"jdbc://mydb-qa\"},{\"name\":\"FEATURE_FLAG\",\"value\":\"true\"}]'
  #   secrets: inherit

  # ------------------------
  # Notify the Jira
  # ------------------------
  # notify-jira:
  #   name: Jira Notify
  #   runs-on: ubuntu-latest
  #   needs: [Codeql-scan, ci, ecs-deploy-dev, Sonarqube-scan, Veracode-scan, ecs-deploy-qa]
  #   if: |
  #     needs.Codeql-scan.result == 'failure' ||
  #     needs.ci.result == 'failure' ||
  #     needs.ecs-deploy-dev.result == 'failure' ||
  #     needs.Sonarqube-scan.result == 'failure' ||
  #     needs.Veracode-scan.result == 'failure' ||
  #     (needs.ecs-deploy-qa.result != 'cancelled' && needs.ecs-deploy-qa.result == 'failure')
  #   steps:
  #     - name: Create Jira Bug
  #       run: |
  #         curl -X POST https://abasahebdubal.atlassian.net/rest/api/2/issue \
  #         -H "Authorization: Basic ${{ secrets.JIRA_AUTH }}" \
  #         -H "Content-Type: application/json" \
  #         -d '{
  #           "fields": {
  #             "project": { "key": "SCRUM" },
  #             "summary": "CI Pipeline Failed - ${{ github.workflow }} #${{ github.run_number }}",
  #             "description": "One or more jobs failed.\nRepo: ${{ github.repository }}\nRun URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
  #             "issuetype": { "id": "10007" },
  #             "parent": { "key": "SCRUM-2" }
  #           }
  #         }'
  
  # # ------------------------
  # # Deploy to Prod (requires approval)
  # # ------------------------
  # ecs-deploy-prod:
  #   name: Deploy to Prod
  #   needs: ecs-deploy-qa
  #   uses: aba-enterprise/enterprise-ci-templates/.github/workflows/ecs-taskservice-template.yml@main
  #   with:
  #     service-name: ${{ vars.SERVICE_NAME }}
  #     task-family: ${{ vars.TASK_FAMILY }}
  #     container-name: ${{ vars.CONTAINER_NAME }}
  #     desired-count: ${{ vars.DESIRED_COUNT }}
  #     image-tag: ${{ github.sha }}
  #     environment: prod
  #   secrets: inherit
  
